# AUTOGENERATED! DO NOT EDIT! File to edit: 00_augmentation.ipynb (unless otherwise specified).

__all__ = ['AugmentSDMX', 'augm_with_sdmx']

# Cell
import pandas as pd
import pandasdmx as sdmx
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.utils.validation import check_is_fitted
from sklearn.feature_selection import VarianceThreshold

class AugmentSDMX(BaseEstimator, TransformerMixin):
    def __init__(self, sources={'BIS': 'all'}, variance_threshold=None, backend='memory', verbose=True):
        self.sources = sources
        self.variance_threshold = variance_threshold
        self.backend = backend
        self.verbose = verbose

    def fit(self, X, y=None):
        self.index_ = X.index if hasattr(X, "index") else None
        self.data_freq_ = self.index_.to_series().diff().min().resolution_string
        format_string = "%Y-%m-%d" if self.data_freq_ == 'D' else "%Y-%m" if self.data_freq_ == 'M' else "%Y"

        X = self._validate_data(X)

        self.keys_ = {'FREQ': self.data_freq_}

        self.params_ = {
            "startPeriod": min(self.index_).strftime(format_string),
            "endPeriod": max(self.index_).strftime(format_string),
        }

        return self

    def transform(self, X):
        check_is_fitted(self)

        data_sdmx = {}
        for source in self.sources.keys():
            src_conn = sdmx.Request(source, backend=self.backend, expire_after=1800)
            src_dflows = src_conn.dataflow()
            if self.sources[source] == 'all':
                dflows = {k: v for k, v in src_dflows.dataflow.items()}
            else:
                dflows = {k: v for k, v in src_dflows.dataflow.items() if k in self.sources[source]}
            for dflow in dflows.keys():
                if self.verbose: print(f"Querying data from {source}'s dataflow '{dflow}' - {dflows[dflow].dict()['name']}...")
                try:
                    data = sdmx.to_pandas(src_conn.data(dflow, key=self.keys_, params=self.params_), datetime='TIME_PERIOD')
                except:
                    if self.verbose: print("this dataflow does not have data in the desired frequency and time period.")
                    continue
                data.columns = ['__'.join(col) for col in data.columns.to_flat_index()]
                data_sdmx[source+"__"+dflow] = data

        if len(data_sdmx.keys()) is None:
            return X

        df = pd.concat(data_sdmx, axis=1)
        df.columns = ['_'.join(col) for col in df.columns.to_flat_index()]

        feat_sel = VarianceThreshold() if self.variance_threshold is None else VarianceThreshold(threshold=self.variance_threshold)
        feat_sel.fit(df)

        self.features_stay = df.columns[feat_sel.get_support()]
        self.features_removed = df.columns[~feat_sel.get_support()]

        df = df.iloc[:, feat_sel.get_support()]
        df.dropna(axis=0, how='all', inplace=True)
        df.dropna(axis=1, how='all', inplace=True)

        self.augm_df_ = df
        del(df)

        X = pd.concat([X, self.augm_df_], axis=1, join='inner')

        return X

# Cell
from simpledmx import *

# Cell
def augm_with_sdmx(df, freq, sources, variance_threshold=None):
    """Downloads relevant data from SDMX sources to complement the original dataset

    Arguments:
      df: a pandas DataFrame
      freq: the frequency of the desired data from SDMX; for example, 'A' is annual
      sources: the list of SDMX sources or None; a list of possible sources can be obtained by running the function list_sdmx_sources()
      variance_threshold: a value larger than or equal to 0 or None, where 0 will lead to the removal of all data that does not vary across the dataset and None uses the scikit-learn default
    """
    start_date, end_date = min(df.index), max(df.index)

    sdmx_data = get_sdmx_data(
        start_date=start_date,
        end_date=end_date,
        freq=freq,
        sources=sources
        )
    sdmx_data = sdmx_data.dropna(axis=1).sort_index()
    sdmx_data.reset_index(inplace=True)
    sdmx_data['TIME_PERIOD'] = pd.to_datetime(sdmx_data['TIME_PERIOD'])
    sdmx_data.set_index('TIME_PERIOD', inplace=True)

    feat_sel = VarianceThreshold() if variance_threshold is None else VarianceThreshold(threshold=variance_threshold)
    feat_sel.fit(sdmx_data)

    # TODO: log which features were not kept and why
    sdmx_data = sdmx_data.iloc[:, feat_sel.get_support()]

    #sdmx_data = feat_sel.fit_transform(sdmx_data)

    if df is None:
        return sdmx_data
    df , blacksoack= df.merge(sdmx_data, how='left', left_on=time_col, right_on='TIME_PERIOD')
    return df